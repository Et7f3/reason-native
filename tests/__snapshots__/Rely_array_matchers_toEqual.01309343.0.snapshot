Rely array matchers › toEqual › expect.array.not.toEqual failure output
Running 1 test suite
<inverse><bold><red> FAIL </inverse></resetDimAndBold></resetColor> <whiteBright>expect.array.not.toEqual failure output</resetColor>
<bold><red>  \226\128\162 expect.array.not.toEqual failure output \226\128\186 empty array</resetDimAndBold></resetColor>

    <dim>expect.array(</resetDimAndBold><red>received</resetColor><dim>).</resetDimAndBold>not<dim>.toEqual(</resetDimAndBold><green>expected</resetColor><dim>)</resetDimAndBold> <dim>/* using == */</resetDimAndBold>
    
    Expected value not to equal:
      <green>[||]</resetColor>
    Received:
      <red>[||]</resetColor>

<bold><red>  \226\128\162 expect.array.not.toEqual failure output \226\128\186 int array</resetDimAndBold></resetColor>

    <dim>expect.array(</resetDimAndBold><red>received</resetColor><dim>).</resetDimAndBold>not<dim>.toEqual(</resetDimAndBold><green>expected</resetColor><dim>)</resetDimAndBold> <dim>/* using == */</resetDimAndBold>
    
    Expected value not to equal:
      <green>{1, 2}</resetColor>
    Received:
      <red>{1, 2}</resetColor>

<bold><red>  \226\128\162 expect.array.not.toEqual failure output \226\128\186 float array</resetDimAndBold></resetColor>

    <dim>expect.array(</resetDimAndBold><red>received</resetColor><dim>).</resetDimAndBold>not<dim>.toEqual(</resetDimAndBold><green>expected</resetColor><dim>)</resetDimAndBold> <dim>/* using == */</resetDimAndBold>
    
    Expected value not to equal:
      <green>[|1., 2.|]</resetColor>
    Received:
      <red>[|1., 2.|]</resetColor>

<bold><red>  \226\128\162 expect.array.not.toEqual failure output \226\128\186 string array</resetDimAndBold></resetColor>

    <dim>expect.array(</resetDimAndBold><red>received</resetColor><dim>).</resetDimAndBold>not<dim>.toEqual(</resetDimAndBold><green>expected</resetColor><dim>)</resetDimAndBold> <dim>/* using == */</resetDimAndBold>
    
    Expected value not to equal:
      <green>{\"bacon\", \"delicious\"}</resetColor>
    Received:
      <red>{\"bacon\", \"delicious\"}</resetColor>

<bold><red>  \226\128\162 expect.array.not.toEqual failure output \226\128\186 empty array</resetDimAndBold></resetColor>

    <dim>expect.array(</resetDimAndBold><red>received</resetColor><dim>).</resetDimAndBold>not<dim>.toEqual(</resetDimAndBold><green>expected</resetColor><dim>)</resetDimAndBold>
    
    Expected value not to equal:
      <green>[||]</resetColor>
    Received:
      <red>[||]</resetColor>

<bold><red>  \226\128\162 expect.array.not.toEqual failure output \226\128\186 within 42</resetDimAndBold></resetColor>

    <dim>expect.array(</resetDimAndBold><red>received</resetColor><dim>).</resetDimAndBold>not<dim>.toEqual(</resetDimAndBold><green>expected</resetColor><dim>)</resetDimAndBold>
    
    Expected value not to equal:
      <green>{41}</resetColor>
    Received:
      <red>{1}</resetColor>


<bold><whiteBright>Test Suites: </resetDimAndBold></resetColor><bold><red>1 failed</resetDimAndBold></resetColor>, 0 passed, 1 total
<bold><whiteBright>Tests:       </resetDimAndBold></resetColor><bold><red>6 failed</resetDimAndBold></resetColor>, 0 passed, 6 total
<bold><whiteBright>Time:        </resetDimAndBold></resetColor>< 1ms

